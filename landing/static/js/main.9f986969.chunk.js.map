{"version":3,"sources":["assets/images/logo.png","assets/images/friends.png","assets/images/icon-app.svg","assets/images/icon-google.svg","assets/images/mobiles-secondary.png","assets/images/footer-icon-app.svg","assets/images/footer-icon-google.svg","components/Banner.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Banner","className","href","src","Logo","alt","FriendsImage","AppStoreIcon","GooglePlayIcon","MobileImages","Footer","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,qDCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,gD,4KCyC5BC,MAjCf,WACI,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,QACX,uBAAGC,KAAK,MACJ,yBAAKC,IAAKC,IAAMC,IAAI,YAG5B,wCACA,0BAAMJ,UAAU,WAAU,yBAAKE,IAAKG,IAAcD,IAAI,aACtD,yBAAKJ,UAAU,gBACX,4BACI,4BAAI,uBAAGC,KAAK,MAAK,yBAAKC,IAAKI,IAAcF,IAAI,OAC7C,4BAAI,uBAAGH,KAAK,MAAK,yBAAKC,IAAKK,IAAgBH,IAAI,aAOvE,yBAAKJ,UAAU,iBACX,yBAAKA,UAAU,qBACX,yBAAKE,IAAKM,IAAcJ,IAAI,S,YCQjCK,MApCf,WACI,OACI,yBAAKC,GAAG,eACJ,yBAAKV,UAAU,aACX,4BAAQU,GAAG,UACP,yBAAKV,UAAU,0BACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,eACX,uBAAGC,KAAK,MACJ,yBAAKC,IAAKC,IAAMC,IAAI,YAG5B,yBAAKJ,UAAU,cACX,4BACI,4BAAI,uBAAGC,KAAK,MAAR,oBACJ,4BAAI,uBAAGA,KAAK,MAAR,4B,MCN7BU,MAXf,WACE,OACE,yBAAKD,GAAG,YAAYV,UAAU,QAC5B,yBAAKU,GAAG,mBACN,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f986969.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8be674da.png\";","module.exports = __webpack_public_path__ + \"static/media/friends.511f559b.png\";","module.exports = __webpack_public_path__ + \"static/media/icon-app.3a62ebde.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-google.9456f116.svg\";","module.exports = __webpack_public_path__ + \"static/media/mobiles-secondary.710ae75f.png\";","module.exports = __webpack_public_path__ + \"static/media/footer-icon-app.93870534.svg\";","module.exports = __webpack_public_path__ + \"static/media/footer-icon-google.367b817f.svg\";","import React from 'react';\n// import images\nimport Logo from '../assets/images/logo.png';\nimport FriendsImage from '../assets/images/friends.png';\nimport AppStoreIcon from '../assets/images/icon-app.svg';\nimport GooglePlayIcon from '../assets/images/icon-google.svg';\nimport MobileImages from '../assets/images/mobiles-secondary.png';\n\nfunction Banner() {\n    return (\n        <div className=\"banner-outer\">\n            <div className=\"banner-wrap\">\n                <div className=\"container\">\n                    <div className=\"banner-section\">\n                        <div className=\"banner-content\">\n                            <div className=\"logo\">\n                                <a href=\"/#\">\n                                    <img src={Logo} alt=\"pluzo\" />\n                                </a>\n                            </div>\n                            <h1>make new</h1>\n                            <span className=\"friends\"><img src={FriendsImage} alt=\"Friends\" /></span>\n                            <div className=\"banner-icons\">\n                                <ul>\n                                    <li><a href=\"/#\"><img src={AppStoreIcon} alt=\"\" /></a></li>\n                                    <li><a href=\"/#\"><img src={GooglePlayIcon} alt=\"\" /></a></li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"banner-mobile\">\n                <div className=\"mobile-photo-wrap\">\n                    <img src={MobileImages} alt=\"\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Banner;\n","import React from 'react';\n// import images\nimport Logo from '../assets/images/logo.png';\nimport AppStoreIcon from '../assets/images/footer-icon-app.svg';\nimport GooglePlayIcon from '../assets/images/footer-icon-google.svg';\n\nfunction Footer() {\n    return (\n        <div id=\"footer-wrap\">\n            <div className=\"container\">\n                <footer id=\"footer\">\n                    <div className=\"row align-items-center\">\n                        <div className=\"col-md-8\">\n                            <div className=\"footer-section-wrap\">\n                                <div className=\"footer-logo\">\n                                    <a href=\"/#\">\n                                        <img src={Logo} alt=\"pluzo\" />\n                                    </a>\n                                </div>\n                                <div className=\"footer-nav\">\n                                    <ul>\n                                        <li><a href=\"/#\">Term of Service</a></li>\n                                        <li><a href=\"/#\">Privacy Policy</a></li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                        {/* <div className=\"col-md-4\">\n                            <div className=\"footer-icons\">\n                                <ul>\n                                    <li><a href=\"/#\"><img src={AppStoreIcon} alt=\"\" /></a></li>\n                                    <li><a href=\"/#\"><img src={GooglePlayIcon} alt=\"\" /></a></li>\n                                </ul>\n                            </div>\n                        </div> */}\n                    </div>\n                </footer>\n            </div>\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport Banner from './components/Banner';\nimport Footer from './components/Footer';\nimport './assets/css/style.css';\n\nfunction App() {\n  return (\n    <div id=\"page-name\" className=\"body\">\n      <div id=\"container-fluid\">\n        <Banner />\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}